class CircularQueue:
    def __init__(self, k):
        self.k = k
        self.queue = [None] * k
        self.head = self.tail = -1
        
    def enqueue(self, data):
        if ((self.tail + 1) % self.k == self.head):
            print("Queue is full\n")
 
        elif (self.head == -1):
            self.head = 0
            self.tail = 0
            self.queue[self.tail] = data
        else:
            self.tail = (self.tail + 1) % self.k
            self.queue[self.tail] = data
            
    def dequeue(self):
        if (self.head == -1):
            print("Queue is empty\n")
 
        elif (self.head == self.tail):
            temp = self.queue[self.head]
            self.head = -1
            self.tail = -1
            return temp
        else:
            temp = self.queue[self.head]
            self.head = (self.head + 1) % self.k
            return temp
        
    def is_empty(self):
        return self.head == -1
    
    def is_full(self):
        return ((self.tail + 1) % self.k == self.head)
    
    def front(self):
        if self.head == -1:
            print("No elements in Queue\n")
        else:
            return self.queue[self.head]
        
    def rear(self):
        if self.tail == -1:
            print("No elements in Queue\n")
        else:
            return self.queue[self.tail]
